/* tslint:disable */
/* eslint-disable */
/**
 * Pawdopt api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContactsPage,
  Message,
  MessageCreate,
  MessagePage,
  MessagePartialUpdate,
  Request,
  RequestPartialUpdate,
} from '../models/index';
import {
    ContactsPageFromJSON,
    ContactsPageToJSON,
    MessageFromJSON,
    MessageToJSON,
    MessageCreateFromJSON,
    MessageCreateToJSON,
    MessagePageFromJSON,
    MessagePageToJSON,
    MessagePartialUpdateFromJSON,
    MessagePartialUpdateToJSON,
    RequestFromJSON,
    RequestToJSON,
    RequestPartialUpdateFromJSON,
    RequestPartialUpdateToJSON,
} from '../models/index';

export interface CreateMessageRequest {
    chatId: string;
    messageCreate: MessageCreate;
}

export interface DeleteMessagesRequest {
    chatId: string;
    messageId: string;
}

export interface ListMessagesRequest {
    chatId: string;
    limit?: number;
    beforeMessageId?: number;
}

export interface UpdateMessagesRequest {
    chatId: string;
    messageId: string;
    messagePartialUpdate: MessagePartialUpdate;
}

export interface UpdateStatusRequest {
    chatId: string;
    requestId: string;
    requestPartialUpdate: RequestPartialUpdate;
}

/**
 * 
 */
export class ChatsApi extends runtime.BaseAPI {

    /**
     * Create a message
     */
    async createMessageRaw(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling createMessage().'
            );
        }

        if (requestParameters['messageCreate'] == null) {
            throw new runtime.RequiredError(
                'messageCreate',
                'Required parameter "messageCreate" was null or undefined when calling createMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/chat/{chatId}`;
        urlPath = urlPath.replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageCreateToJSON(requestParameters['messageCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Create a message
     */
    async createMessage(requestParameters: CreateMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.createMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a message
     */
    async deleteMessagesRaw(requestParameters: DeleteMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling deleteMessages().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling deleteMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/chat/{chatId}/message/{messageId}`;
        urlPath = urlPath.replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId'])));
        urlPath = urlPath.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a message
     */
    async deleteMessages(requestParameters: DeleteMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMessagesRaw(requestParameters, initOverrides);
    }

    /**
     * List all latest conversation messages
     */
    async listChatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContactsPage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/chat`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactsPageFromJSON(jsonValue));
    }

    /**
     * List all latest conversation messages
     */
    async listChats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContactsPage> {
        const response = await this.listChatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get chat history of chatId
     */
    async listMessagesRaw(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePage>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling listMessages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['beforeMessageId'] != null) {
            queryParameters['beforeMessageId'] = requestParameters['beforeMessageId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/chat/{chatId}`;
        urlPath = urlPath.replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePageFromJSON(jsonValue));
    }

    /**
     * Get chat history of chatId
     */
    async listMessages(requestParameters: ListMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePage> {
        const response = await this.listMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit a message
     */
    async updateMessagesRaw(requestParameters: UpdateMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling updateMessages().'
            );
        }

        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling updateMessages().'
            );
        }

        if (requestParameters['messagePartialUpdate'] == null) {
            throw new runtime.RequiredError(
                'messagePartialUpdate',
                'Required parameter "messagePartialUpdate" was null or undefined when calling updateMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/chat/{chatId}/message/{messageId}`;
        urlPath = urlPath.replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId'])));
        urlPath = urlPath.replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters['messageId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MessagePartialUpdateToJSON(requestParameters['messagePartialUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Edit a message
     */
    async updateMessages(requestParameters: UpdateMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.updateMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Approve/Reject a chat request
     */
    async updateStatusRaw(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Request>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling updateStatus().'
            );
        }

        if (requestParameters['requestId'] == null) {
            throw new runtime.RequiredError(
                'requestId',
                'Required parameter "requestId" was null or undefined when calling updateStatus().'
            );
        }

        if (requestParameters['requestPartialUpdate'] == null) {
            throw new runtime.RequiredError(
                'requestPartialUpdate',
                'Required parameter "requestPartialUpdate" was null or undefined when calling updateStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/chat/{chatId}/request/{requestId}`;
        urlPath = urlPath.replace(`{${"chatId"}}`, encodeURIComponent(String(requestParameters['chatId'])));
        urlPath = urlPath.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters['requestId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RequestPartialUpdateToJSON(requestParameters['requestPartialUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestFromJSON(jsonValue));
    }

    /**
     * Approve/Reject a chat request
     */
    async updateStatus(requestParameters: UpdateStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Request> {
        const response = await this.updateStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
