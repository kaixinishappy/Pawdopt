/* tslint:disable */
/* eslint-disable */
/**
 * Pawdopt api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Dog,
  DogCreate,
  DogPage,
  DogPartialUpdate,
} from '../models/index';
import {
    DogFromJSON,
    DogToJSON,
    DogCreateFromJSON,
    DogCreateToJSON,
    DogPageFromJSON,
    DogPageToJSON,
    DogPartialUpdateFromJSON,
    DogPartialUpdateToJSON,
} from '../models/index';

export interface CreateDogRequest {
    dogCreate: DogCreate;
}

export interface DeleteDogRequest {
    dogId: string;
}

export interface GetDogRequest {
    dogId: string;
    dogCreatedAt: string;
}

export interface ListDogsRequest {
    limit?: number;
    page?: number;
}

export interface UpdateDogRequest {
    dogId: string;
    dogPartialUpdate: DogPartialUpdate;
}

/**
 * 
 */
export class DogsApi extends runtime.BaseAPI {

    /**
     * Create a dog
     */
    async createDogRaw(requestParameters: CreateDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dog>> {
        if (requestParameters['dogCreate'] == null) {
            throw new runtime.RequiredError(
                'dogCreate',
                'Required parameter "dogCreate" was null or undefined when calling createDog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/dog`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DogCreateToJSON(requestParameters['dogCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogFromJSON(jsonValue));
    }

    /**
     * Create a dog
     */
    async createDog(requestParameters: CreateDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dog> {
        const response = await this.createDogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a dog
     */
    async deleteDogRaw(requestParameters: DeleteDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['dogId'] == null) {
            throw new runtime.RequiredError(
                'dogId',
                'Required parameter "dogId" was null or undefined when calling deleteDog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/dog/{dogId}`;
        urlPath = urlPath.replace(`{${"dogId"}}`, encodeURIComponent(String(requestParameters['dogId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a dog
     */
    async deleteDog(requestParameters: DeleteDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDogRaw(requestParameters, initOverrides);
    }

    /**
     * Get a dog profile by id
     */
    async getDogRaw(requestParameters: GetDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dog>> {
        if (requestParameters['dogId'] == null) {
            throw new runtime.RequiredError(
                'dogId',
                'Required parameter "dogId" was null or undefined when calling getDog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
                headerParameters["x-created-at"] = requestParameters['dogCreatedAt']
            }
        }

        let urlPath = `/dog/{dogId}`;
        urlPath = urlPath.replace(`{${"dogId"}}`, encodeURIComponent(String(requestParameters['dogId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogFromJSON(jsonValue));
    }

    /**
     * Get a dog profile by id
     */
    async getDog(requestParameters: GetDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dog> {
        const response = await this.getDogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all dogs
     */
    async listDogsRaw(requestParameters: ListDogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DogPage>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/dog`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogPageFromJSON(jsonValue));
    }

    /**
     * List all dogs
     */
    async listDogs(requestParameters: ListDogsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DogPage> {
        const response = await this.listDogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update dog profile
     */
    async updateDogRaw(requestParameters: UpdateDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Dog>> {
        if (requestParameters['dogId'] == null) {
            throw new runtime.RequiredError(
                'dogId',
                'Required parameter "dogId" was null or undefined when calling updateDog().'
            );
        }

        if (requestParameters['dogPartialUpdate'] == null) {
            throw new runtime.RequiredError(
                'dogPartialUpdate',
                'Required parameter "dogPartialUpdate" was null or undefined when calling updateDog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/dog/{dogId}`;
        urlPath = urlPath.replace(`{${"dogId"}}`, encodeURIComponent(String(requestParameters['dogId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DogPartialUpdateToJSON(requestParameters['dogPartialUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DogFromJSON(jsonValue));
    }

    /**
     * Update dog profile
     */
    async updateDog(requestParameters: UpdateDogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Dog> {
        const response = await this.updateDogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
