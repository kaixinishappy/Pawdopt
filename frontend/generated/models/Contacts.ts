/* tslint:disable */
/* eslint-disable */
/**
 * Pawdopt api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * List view of one contact on contact page
 * @export
 * @interface Contacts
 */
export interface Contacts {
    /**
     * chatId
     * @type {string}
     * @memberof Contacts
     */
    chatId?: string;
    /**
     * requestId
     * @type {string}
     * @memberof Contacts
     */
    requestId?: string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    status?: ContactsStatusEnum;
    /**
     * Last message sent time or request create time
     * @type {string}
     * @memberof Contacts
     */
    time?: string;
    /**
     * Content of last message
     * @type {string}
     * @memberof Contacts
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof Contacts
     */
    userIcon?: string;
    /**
     * 
     * @type {number}
     * @memberof Contacts
     */
    unreadCount?: number;
}


/**
 * @export
 */
export const ContactsStatusEnum = {
    Requested: 'Requested',
    Approved: 'Approved',
    Rejected: 'Rejected'
} as const;
export type ContactsStatusEnum = typeof ContactsStatusEnum[keyof typeof ContactsStatusEnum];


/**
 * Check if a given object implements the Contacts interface.
 */
export function instanceOfContacts(value: object): value is Contacts {
    return true;
}

export function ContactsFromJSON(json: any): Contacts {
    return ContactsFromJSONTyped(json, false);
}

export function ContactsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contacts {
    if (json == null) {
        return json;
    }
    return {
        
        'chatId': json['chatId'] == null ? undefined : json['chatId'],
        'requestId': json['requestId'] == null ? undefined : json['requestId'],
        'status': json['status'] == null ? undefined : json['status'],
        'time': json['time'] == null ? undefined : json['time'],
        'content': json['content'] == null ? undefined : json['content'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'username': json['username'] == null ? undefined : json['username'],
        'userIcon': json['userIcon'] == null ? undefined : json['userIcon'],
        'unreadCount': json['unreadCount'] == null ? undefined : json['unreadCount'],
    };
}

export function ContactsToJSON(json: any): Contacts {
    return ContactsToJSONTyped(json, false);
}

export function ContactsToJSONTyped(value?: Contacts | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chatId': value['chatId'],
        'requestId': value['requestId'],
        'status': value['status'],
        'time': value['time'],
        'content': value['content'],
        'userId': value['userId'],
        'username': value['username'],
        'userIcon': value['userIcon'],
        'unreadCount': value['unreadCount'],
    };
}

